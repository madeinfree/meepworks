{"version":3,"sources":["modules.js"],"names":[],"mappings":";;;;;;IAAO,KAAK,wCAAM,OAAO;;IAClB,UAAU,wCAAM,qBAAqB;;IACrC,SAAS,wCAAM,oBAAoB;;AAI1C,IAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC;;;AAChC,QAAM,EAAC,kBAAG;AACR,WAAO,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC;AACzC,WAAO;;;MAAO,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG;KAAQ,CAAC;GACnD;CACF,CAAC,CAAC;;AAEH,IAAM,WAAW,GAAG,MAAA,MAAM,EAAE,CAAC;;IACvB,UAAU,cAAS,UAAU;WAA7B,UAAU;uCAAV,UAAU;;QAAS,UAAU;AAAV,gBAAU;;;;yBAA7B,UAAU,EAAS,UAAU;;oCAA7B,UAAU;AACV,UAAM;WAAA,YAAG;AACX,eAAO,WAAW,CAAC;OACpB;;;AACD,UAAM;aAAC,gBAAC,OAAO,EAAE;AACf,eAAO,MAAA,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;OAC/C;;;;;;SANG,UAAU;GAAS,UAAU;;IAS7B,SAAS,cAAS,SAAS;AACpB,WADP,SAAS;uCAAT,SAAS;;AAEX,QAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;GACnC;;yBAHG,SAAS,EAAS,SAAS;;oCAA3B,SAAS;AAIT,YAAQ;WAAA,YAAG;AACb,eAAO,CAAC;AACN,gBAAM,EAAE,WAAW;AACnB,iBAAO,EAAE,IAAI,CAAC,gBAAgB;SAC/B,CAAC,CAAC;OACJ;;;AACD,oBAAgB;aAAA,0BAAC,OAAO,EAAE;AACxB,YAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,YAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OACrB;;;;AACD,aAAS;aAAA,qBAAG;AACV,eAAO,IAAI,CAAC,IAAI,CAAC;OAClB;;;;AACD,aAAS;aAAA,mBAAC,IAAI,EAAE;AACd,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;OAClB;;;;AACG,OAAG;WAAA,YAAG;AACR,eAAO,IAAI,CAAC,IAAI,CAAC;OAClB;;;;;SAtBG,SAAS;GAAS,SAAS;;iBAwBlB;AACb,WAAS,EAAE,OAAO;AAClB,QAAM,EAAE,CAAC,SAAS,CAAC;CACpB","file":"modules.js","sourceRoot":"/test-server/","sourcesContent":["import React from 'react';\nimport ActionBase from '../dist/action-base';\nimport StoreBase from '../dist/store-base';\n\n\n\nconst Modules = React.createClass({\n  render () {\n    console.log(TimeStore.getInstance().now);\n    return <div>{ TimeStore.getInstance().now }</div>;\n  }\n});\n\nconst UPDATE_TIME = Symbol();\nclass UpdateTime extends ActionBase {\n  get symbol() {\n    return UPDATE_TIME;\n  }\n  action (payload) {\n    return Promise.resolve(new Date().toString());\n  }\n}\n\nclass TimeStore extends StoreBase {\n  constructor() {\n    this.time = new Date().toString();\n  }\n  get handlers() {\n    return [{\n      action: UPDATE_TIME,\n      handler: this.handleUpdateTime\n    }];\n  }\n  handleUpdateTime(payload) {\n    this.time = payload;\n    this.emit('change');\n  }\n  dehydrate() {\n    return this.time;\n  }\n  rehydrate(time) {\n    this.time = time;\n  }\n  get now() {\n    return this.time;\n  }\n}\nexport default {\n  component: Modules,\n  stores: [TimeStore]\n};\n"]}