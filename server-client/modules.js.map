{"version":3,"sources":["modules.js"],"names":[],"mappings":";;;4BAAO,KAAK,EACL,UAAU,EACV,SAAS,EAIV,OAAO,EAOP,WAAW,EACX,UAAU,EASV,SAAS;;;;;;;;AAvBR,WAAK;;AACL,gBAAU;;AACV,eAAS;;;AAIV,aAAO,GAAG,KAAK,CAAC,WAAW,CAAC;;;AAChC,cAAM,EAAC,kBAAG;AACR,iBAAO,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC;AACzC,iBAAO;;;YAAO,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG;WAAQ,CAAC;SACnD;OACF,CAAC;AAEI,iBAAW,GAAG,MAAA,MAAM,EAAE;;AACtB,gBAAU,cAAS,UAAU;iBAA7B,UAAU;6CAAV,UAAU;;cAAS,UAAU;AAAV,sBAAU;;;;+BAA7B,UAAU,EAAS,UAAU;;0CAA7B,UAAU;AACV,gBAAM;iBAAA,YAAG;AACX,qBAAO,WAAW,CAAC;aACpB;;;AACD,gBAAM;mBAAC,gBAAC,OAAO,EAAE;AACf,qBAAO,MAAA,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC/C;;;;;;eANG,UAAU;SAAS,UAAU;;AAS7B,eAAS,cAAS,SAAS;AACpB,iBADP,SAAS;6CAAT,SAAS;;AAEX,cAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;SACnC;;+BAHG,SAAS,EAAS,SAAS;;0CAA3B,SAAS;AAIT,kBAAQ;iBAAA,YAAG;AACb,qBAAO,CAAC;AACN,sBAAM,EAAE,WAAW;AACnB,uBAAO,EAAE,IAAI,CAAC,gBAAgB;eAC/B,CAAC,CAAC;aACJ;;;AACD,0BAAgB;mBAAA,0BAAC,OAAO,EAAE;AACxB,kBAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,kBAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACrB;;;;AACD,mBAAS;mBAAA,qBAAG;AACV,qBAAO,IAAI,CAAC,IAAI,CAAC;aAClB;;;;AACD,mBAAS;mBAAA,mBAAC,IAAI,EAAE;AACd,kBAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aAClB;;;;AACG,aAAG;iBAAA,YAAG;AACR,qBAAO,IAAI,CAAC,IAAI,CAAC;aAClB;;;;;eAtBG,SAAS;SAAS,SAAS;;yBAwBlB;AACb,iBAAS,EAAE,OAAO;AAClB,cAAM,EAAE,CAAC,SAAS,CAAC;OACpB","file":"modules.js","sourceRoot":"/test-server/","sourcesContent":["import React from 'react';\nimport ActionBase from '../dist/action-base';\nimport StoreBase from '../dist/store-base';\n\n\n\nconst Modules = React.createClass({\n  render () {\n    console.log(TimeStore.getInstance().now);\n    return <div>{ TimeStore.getInstance().now }</div>;\n  }\n});\n\nconst UPDATE_TIME = Symbol();\nclass UpdateTime extends ActionBase {\n  get symbol() {\n    return UPDATE_TIME;\n  }\n  action (payload) {\n    return Promise.resolve(new Date().toString());\n  }\n}\n\nclass TimeStore extends StoreBase {\n  constructor() {\n    this.time = new Date().toString();\n  }\n  get handlers() {\n    return [{\n      action: UPDATE_TIME,\n      handler: this.handleUpdateTime\n    }];\n  }\n  handleUpdateTime(payload) {\n    this.time = payload;\n    this.emit('change');\n  }\n  dehydrate() {\n    return this.time;\n  }\n  rehydrate(time) {\n    this.time = time;\n  }\n  get now() {\n    return this.time;\n  }\n}\nexport default {\n  component: Modules,\n  stores: [TimeStore]\n};\n"]}